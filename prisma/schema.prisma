generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_type {
  id            Int      @id @default(autoincrement())
  name          UserType @unique
  formated_name String   @db.VarChar(100)
  user          user[]
}

model user {
  id                    Int                     @id @default(autoincrement())
  username              String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(100)
  password              String?                 @unique
  contact               String?                 @db.VarChar(200)
  user_type_id          Int
  isOauthUser           Boolean                 @default(false)
  oauthProvider         EOauthProvider?
  purchase_order_header purchase_order_header[]
  sales_order_header    sales_order_header[]
  userType              user_type               @relation(fields: [user_type_id], references: [id])
}

model supplier {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(100)
  contact               String                  @db.VarChar(200)
  purchase_order_header purchase_order_header[]
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(200)
  product     product[]
}

model product {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  description           String?                 @db.VarChar(200)
  price                 Float
  category_id           Int
  inventory_stock       inventory_stock?
  inventory_transaction inventory_transaction[]
  categoryId            category                @relation(fields: [category_id], references: [id])
  purchase_order_row    purchase_order_row[]
  sales_order_row       sales_order_row[]
}

model inventory_stock {
  product_id Int     @unique
  quantity   Float
  id         Int     @id @default(autoincrement())
  productId  product @relation(fields: [product_id], references: [id])
}

model inventory_transaction {
  id                   Int                      @id @default(autoincrement())
  product_id           Int
  product_name         String                   @db.VarChar(100)
  transaction_quantity Float
  type                 InventoryTransactionType
  created_at           DateTime                 @default(now()) @db.Timestamptz(6)
  productId            product                  @relation(fields: [product_id], references: [id])
}

model purchase_order_header {
  id                 Int                  @id @default(autoincrement())
  reference_number   String               @db.VarChar(255)
  description        String?              @db.VarChar(200)
  approval_status    ApprovalStatus
  supplier_id        Int
  created_by         Int
  total_price        Float
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  createdBy          user                 @relation(fields: [created_by], references: [id])
  supplierId         supplier             @relation(fields: [supplier_id], references: [id])
  purchase_order_row purchase_order_row[]
}

model purchase_order_row {
  id           Int                   @id @default(autoincrement())
  header_id    Int
  product_id   Int
  product_name String                @db.VarChar(100)
  quantity     Float
  total_price  Float
  description  String?               @db.VarChar(200)
  headerId     purchase_order_header @relation(fields: [header_id], references: [id])
  productId    product               @relation(fields: [product_id], references: [id])
}

model sales_order_header {
  id               Int               @id @default(autoincrement())
  reference_number String            @db.VarChar(255)
  description      String?           @db.VarChar(200)
  customer_name    String            @db.VarChar(100)
  created_by       Int
  total_price      Float
  approval_status  ApprovalStatus
  createdBy        user              @relation(fields: [created_by], references: [id])
  sales_order_row  sales_order_row[]
}

model sales_order_row {
  id           Int                @id @default(autoincrement())
  header_id    Int
  product_id   Int
  quantity     Float
  total_price  Float
  description  String?            @db.VarChar(200)
  product_name String             @db.VarChar(100)
  headerId     sales_order_header @relation(fields: [header_id], references: [id])
  productId    product            @relation(fields: [product_id], references: [id])
}

enum UserType {
  ADMIN
  SALES_STAFF
  WAREHOUSE_STAFF
}

enum EOauthProvider {
  GOOGLE
  FACEBOOK
  LINKEDIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InventoryTransactionType {
  IN
  OUT
}
