generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  user type generally of (admin, sales staff and warehouse staff)
model user_type {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)
  user user[]
}

enum EOauthProvider {
  GOOGLE
  FACEBOOK
  LINKEDIN
}

model user {
  id                    Int                     @id @default(autoincrement())
  username              String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(100)
  password              String?                 @unique
  contact               String?                 @db.VarChar(200)
  user_type_id          Int
  userType              user_type               @relation(fields: [user_type_id], references: [id])
  isOauthUser           Boolean                 @default(false)
  oauthProvider         EOauthProvider?
  purchase_order_header purchase_order_header[]
  sales_order_header    sales_order_header[]
}

model supplier {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(100)
  contact               String                  @db.VarChar(200)
  purchase_order_header purchase_order_header[]
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(200)
  product     product[]
}

model product {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  description           String?                 @db.VarChar(200)
  price                 Float
  category_id           Int
  categoryId            category                @relation(fields: [category_id], references: [id])
  inventory_stock       inventory_stock[]
  inventory_transaction inventory_transaction[]
  purchase_order_row    purchase_order_row[]
  sales_order_row       sales_order_row[]
}

model inventory_stock {
  product_id Int     @id
  productId  product @relation(fields: [product_id], references: [id])
  quantity   Float
}

model inventory_transaction {
  id                   Int     @id @default(autoincrement())
  type                 String  @db.VarChar(50)
  product_id           Int
  productId            product @relation(fields: [product_id], references: [id])
  product_name         String  @db.VarChar(100)
  transaction_quantity Float
}

model purchase_order_header {
  id                 Int                  @id @default(autoincrement())
  description        String?              @db.VarChar(200)
  approval_status    String               @db.VarChar(50)
  supplier_id        Int
  supplierId         supplier             @relation(fields: [supplier_id], references: [id])
  created_by         Int
  createdBy          user                 @relation(fields: [created_by], references: [id])
  total_price        Float
  purchase_order_row purchase_order_row[]
}

model purchase_order_row {
  id           Int                   @id @default(autoincrement())
  header_id    Int
  headerId     purchase_order_header @relation(fields: [header_id], references: [id])
  product_id   Int
  productId    product               @relation(fields: [product_id], references: [id])
  product_name String                @db.VarChar(100)
  quantity     Float
  total_price  Float
  description  String?               @db.VarChar(200)
}

model sales_order_header {
  id              Int               @id @default(autoincrement())
  description     String?           @db.VarChar(200)
  approval_status String            @db.VarChar(50)
  customer_name   String            @db.VarChar(100)
  created_by      Int
  createdBy       user              @relation(fields: [created_by], references: [id])
  total_price     Float
  sales_order_row sales_order_row[]
}

model sales_order_row {
  id          Int                @id @default(autoincrement())
  header_id   Int
  headerId    sales_order_header @relation(fields: [header_id], references: [id])
  product_id  Int
  productId   product            @relation(fields: [product_id], references: [id])
  quantity    Float
  total_price Float
  description String?            @db.VarChar(200)
}
